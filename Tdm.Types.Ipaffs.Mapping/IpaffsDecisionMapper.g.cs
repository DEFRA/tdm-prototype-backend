//------------------------------------------------------------------------------
// <auto-generated>
	//     This code was generated from a template.
	//
	//     Manual changes to this file may cause unexpected behavior in your application.
	//     Manual changes to this file will be overwritten if the code is regenerated.
	//
//</auto-generated>
//------------------------------------------------------------------------------
#nullable enable


namespace Tdm.Types.Ipaffs;

public static class IpaffsDecisionMapper
{
	public static Tdm.Model.Ipaffs.IpaffsDecision Map(Tdm.Types.Ipaffs.IpaffsDecision from)
	{
	if(from is null)
	{
		return default!;
	}
		var to = new Tdm.Model.Ipaffs.IpaffsDecision ();
to.ConsignmentAcceptable = from.ConsignmentAcceptable;
            to.NotAcceptableAction = IpaffsDecisionNotAcceptableActionEnumMapper.Map(from?.NotAcceptableAction);
                to.NotAcceptableActionDestructionReason = IpaffsDecisionNotAcceptableActionDestructionReasonEnumMapper.Map(from?.NotAcceptableActionDestructionReason);
                to.NotAcceptableActionEntryRefusalReason = IpaffsDecisionNotAcceptableActionEntryRefusalReasonEnumMapper.Map(from?.NotAcceptableActionEntryRefusalReason);
                to.NotAcceptableActionQuarantineImposedReason = IpaffsDecisionNotAcceptableActionQuarantineImposedReasonEnumMapper.Map(from?.NotAcceptableActionQuarantineImposedReason);
                to.NotAcceptableActionSpecialTreatmentReason = IpaffsDecisionNotAcceptableActionSpecialTreatmentReasonEnumMapper.Map(from?.NotAcceptableActionSpecialTreatmentReason);
                to.NotAcceptableActionIndustrialProcessingReason = IpaffsDecisionNotAcceptableActionIndustrialProcessingReasonEnumMapper.Map(from?.NotAcceptableActionIndustrialProcessingReason);
                to.NotAcceptableActionReDispatchReason = IpaffsDecisionNotAcceptableActionReDispatchReasonEnumMapper.Map(from?.NotAcceptableActionReDispatchReason);
                to.NotAcceptableActionUseForOtherPurposesReason = IpaffsDecisionNotAcceptableActionUseForOtherPurposesReasonEnumMapper.Map(from?.NotAcceptableActionUseForOtherPurposesReason);
                to.NotAcceptableDestructionReason = from.NotAcceptableDestructionReason;
            to.NotAcceptableActionOtherReason = from.NotAcceptableActionOtherReason;
            to.NotAcceptableActionByDate = from.NotAcceptableActionByDate;
            to.ChedppNotAcceptableReasons = from?.ChedppNotAcceptableReasons?.Select(x => IpaffsChedppNotAcceptableReasonMapper.Map(x)).ToArray();
                to.NotAcceptableReasons = from.NotAcceptableReasons;
            to.NotAcceptableCountry = from.NotAcceptableCountry;
            to.NotAcceptableEstablishment = from.NotAcceptableEstablishment;
            to.NotAcceptableOtherReason = from.NotAcceptableOtherReason;
            to.DetailsOfControlledDestinations = IpaffsPartyMapper.Map(from?.DetailsOfControlledDestinations);
                to.SpecificWarehouseNonConformingConsignment = IpaffsDecisionSpecificWarehouseNonConformingConsignmentEnumMapper.Map(from?.SpecificWarehouseNonConformingConsignment);
                to.TemporaryDeadline = from.TemporaryDeadline;
            to.Decision = IpaffsDecisionDecisionEnumMapper.Map(from?.Decision);
                to.FreeCirculationPurpose = IpaffsDecisionFreeCirculationPurposeEnumMapper.Map(from?.FreeCirculationPurpose);
                to.DefinitiveImportPurpose = IpaffsDecisionDefinitiveImportPurposeEnumMapper.Map(from?.DefinitiveImportPurpose);
                to.IfChanneledOption = IpaffsDecisionIfChanneledOptionEnumMapper.Map(from?.IfChanneledOption);
                to.CustomWarehouseRegisteredNumber = from.CustomWarehouseRegisteredNumber;
            to.FreeWarehouseRegisteredNumber = from.FreeWarehouseRegisteredNumber;
            to.ShipName = from.ShipName;
            to.ShipPortOfExit = from.ShipPortOfExit;
            to.ShipSupplierRegisteredNumber = from.ShipSupplierRegisteredNumber;
            to.TranshipmentBip = from.TranshipmentBip;
            to.TranshipmentThirdCountry = from.TranshipmentThirdCountry;
            to.TransitExitBip = from.TransitExitBip;
            to.TransitThirdCountry = from.TransitThirdCountry;
            to.TransitDestinationThirdCountry = from.TransitDestinationThirdCountry;
            to.TemporaryExitBip = from.TemporaryExitBip;
            to.HorseReentry = from.HorseReentry;
            to.TranshipmentEuOrThirdCountry = from.TranshipmentEuOrThirdCountry;
            	return to;
	}
}

